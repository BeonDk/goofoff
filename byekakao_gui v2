import os
import tkinter.ttk as ttk
import tkinter.messagebox as msgbox
from tkinter import * # __all__
from tkinter import filedialog
from datetime import datetime
import send2trash

# To-do list
# 1. del_file 함수 적용될 때 삭제가 아니라 send2trash로 가는 옵션도 만들 것 (tkinter의 선택지 고르른 것에 적용하는 것 검토)


root = Tk()
root.title("Byekako")

# 파일 추가
def add_file():
    files = filedialog.askopenfilenames(title="이미지 파일을 선택하세요", \
        initialdir=r"C:\Users\PHIL\Desktop\goofoff") # 최초 폴더 지정

# 사용자가 선택한 파일출력
#   # 선택된 값을 list에 받아오는 방식 / class는 list
#     a = []
#     for file in files:
#         a.append(file)
#         print(type(a))
#         # print(*a, sep='\n')
#   # tkinter 모듈에서 처리 / class는 tkinter.listbox
    for file in files:
        list_file.insert(END, file)
        print(type(list_file))
        b = list_file.get(0, END)
    print(*b, sep='\n')

def del_file():
    # print(list_file.curselection())
    for index in reversed(list_file.curselection()):
        list_file.delete(index)
    print(list_file.get(0, END))
### to-do_221010_삭제된 파일리스트까지는 완성되었고 전체 파일 경로를 넣어서 나중에 os를 활용하여 실제로 지울 파일들 목록을 따오는 것 준비
# branch 생성함

# 삭제하고자 하는 날짜 프레임

windows_user_name = os.path.expanduser('~')
path_dir = f'{windows_user_name}\\desktop\\test_folder'
file_size = os.path.getsize(path_dir)
file_list = os.listdir(path_dir)

def browse_dest_path():
    # folder_selected = filedialog.askdirectory()
    # if folder_selected == "": # 사용자가 취소를 누를 때
    #     return
    
    # print(folder_selected)
    value_txt_dest_path = txt_dest_path.get()
    inputDate = datetime.strptime(value_txt_dest_path,f'%Y%m%d')
    folderfile_list = []
    folderfile_only = []

    for (path, dir, files) in os.walk(path_dir):
        for filename in files:
            fileMtime = datetime.fromtimestamp(os.path.getmtime(path+'\\'+filename))
            # print(inputDate)
            # print(fileMtime)
            if inputDate < fileMtime:
                # print('경로 : [%s], 파일명 : [%s], 수정일자 : [%s]' %(path,filename,fileMtime))
                # print(f'{path} {filename} {fileMtime}') # 온전히 파일 이름만 입력
                # a = ({path}+{filename})
                folderfile_only.append(path+'\\'+filename)
                folderfile_list.append(f'경로 : {path}, 파일명 : {filename}, 수정일자 : {fileMtime}')
                # print(*folderfile_list, sep='\n')
                # print(*folderfile_only, sep='\n')
            # else:
            #     print(f"{inputDate}보다 일찍 생성된 파일이 없습니다.")
    if len(folderfile_only) == 0:
        print(f"{inputDate}보다 일찍 생성된 파일이 없습니다.")
    else:
        print(*folderfile_only, sep='\n')
        while True:
            YN = input("선택된 파일들을 휴지통으로 이동시키겠습니까? (Y/N)")
            YN = YN.upper() # y/n 대소문자 아무거나 넣었을 때 일정한 값으로 입력시키기 위한 구문
            
            if YN == "Y" :
                os.chdir(path_dir)
                send2trash.send2trash(folderfile_only)
                print("선택한 파일이 모두 휴지통으로 이동되었습니다. 복구하고 싶으면 휴지통에서 복구 하세요.")
                break
            elif YN == "N" :
                print("프로그램을 종료합니다.")
                break
            else:
                print("잘못된 값을 입력하였습니다. 다시 입력하여주세요.")
    # 아래는 타입 테스트용 프린트
    # print(type(inputDate))
    # V = str(value_txt_dest_path)
    # print(V)
    # print(type(V))

    # print(txt_dest_path.get())
    # txt_dest_path.delete(0,END)
    # txt_dest_path.insert(0, folder_selected)
    
# 시작
def start():
    # 각 옵션들 값을 확인
    print("가로넓이 : ", cmb_width.get())
    print("간격 : ", cmb_space.get())
    print("포맷 : ", cmb_format.get())

    # 파일 목록 확인
    if list_file.size() == 0:
        msgbox.showwarning("경고", "이미지 파일을 추가하세요")
        return

    # 저장 경로 확인
    if len(txt_dest_path.get()) == 0:
        msgbox.showwarning("경고", "저장 경로를 선택하세요")
        return

    # 이미지 통합 작업
    # merge_image()

# 정한 폴더 파일 사이즈 구하기
windows_user_name = os.path.expanduser('~')
path_dir = f'{windows_user_name}\\desktop\\test_folder'
file_list = os.listdir(path_dir)
file_size = os.path.getsize(path_dir)


# 파일 프레임 (파일 추가, 선택 삭제)
file_frame = Frame(root)
file_frame.pack(fill="x", padx=5, pady=5) # 간격 띄우기

# btn_add_file = Button(file_frame, padx=5, pady=5, width=12, text="파일추가", command=add_file)
# btn_add_file.pack(side="left")
# file_frame.insert(0, f'{file_size}kb의 용량이 사용되고 있습니다.')

main_label = Label(file_frame, text=f'{file_size}kb의 용량이 사용되고 있습니다.')
main_label.pack(side="left", padx=5, pady=5)



# 리스트 프레임
list_frame = Frame(root)
list_frame.pack(fill="both", padx=5, pady=5)

scrollbar = Scrollbar(list_frame)
scrollbar.pack(side="right", fill="y")

list_file = Listbox(list_frame, selectmode="extended", height=15, yscrollcommand=scrollbar.set)

### to-do_done. list_file 자체에 default 값으로 카카오톡 폴더의 총 파일 사이즈를 가지고 와야함 > 카카오톡 지울 폴더의 총 파일 사이즈 함수 정의

# tip. 해당 내용은 별도의 현재 상태표시 프레임으로 넣을 것 list_file.insert(0, f'{file_size}kb의 용량이 사용되고 있습니다.')
# tip. 아래는 지정된 리스트 프레임에 파일 리스트(path_dir = user\\desktop\\test_foler)를 하나씩 넣어주는 것
for i in range(len(file_list)):
    list_file.insert(END, file_list[i])

list_file.pack(side="left", fill="both", expand=True)
scrollbar.config(command=list_file.yview)

btn_del_file = Button(file_frame, padx=5, pady=5, width=12, text="선택삭제", command=del_file)
print(type(list_file))
btn_del_file.pack(side="right")

# 저장 경로 프레임
### to-do 1. Button command 변경이 필요함 > 찾아보기에서 파일 검색 후 목록으로 보여주는 함수로 변경 (browse_dest_path)
### to-do 2. Entry에 입력되는 값 받아와야 함
path_frame = LabelFrame(root, text="삭제하고자 하는 날짜를 입력/선택해주세요")
path_frame.pack(fill="x", padx=5, pady=5, ipady=5)

txt_dest_path = Entry(path_frame)
txt_dest_path.pack(side="left", fill="x", expand=True, padx=5, pady=5, ipady=4) # 높이 변경
# get 값을 통해서 entry에 들어가있는 value를 value_txt_dest_path로 돌려줌
value_txt_dest_path = txt_dest_path.get()
V = str(value_txt_dest_path)

btn_dest_path = Button(path_frame, text="검색", width=10, command=browse_dest_path)
btn_dest_path.pack(side="right", padx=5, pady=5)

# 옵션 프레임
frame_option = LabelFrame(root, text="옵션")
frame_option.pack(padx=5, pady=5, ipady=5)

# 1. 가로 넓이 옵션
# 가로 넓이 레이블
lbl_width = Label(frame_option, text="가로넓이", width=8)
lbl_width.pack(side="left", padx=5, pady=5)

# 가로 넓이 콤보
opt_width = ["원본유지", "1024", "800", "640"]
cmb_width = ttk.Combobox(frame_option, state="readonly", values=opt_width, width=10)
cmb_width.current(0)
cmb_width.pack(side="left", padx=5, pady=5)

# 2. 간격 옵션
# 간격 옵션 레이블
lbl_space = Label(frame_option, text="간격", width=8)
lbl_space.pack(side="left", padx=5, pady=5)

# 간격 옵션 콤보
opt_space = ["없음", "좁게", "보통", "넓게"]
cmb_space = ttk.Combobox(frame_option, state="readonly", values=opt_space, width=10)
cmb_space.current(0)
cmb_space.pack(side="left", padx=5, pady=5)

# 3. 파일 포맷 옵션
# 파일 포맷 옵션 레이블
lbl_format = Label(frame_option, text="포맷", width=8)
lbl_format.pack(side="left", padx=5, pady=5)

# 파일 포맷 옵션 콤보
opt_format = ["PNG", "JPG", "BMP"]
cmb_format = ttk.Combobox(frame_option, state="readonly", values=opt_format, width=10)
cmb_format.current(0)
cmb_format.pack(side="left", padx=5, pady=5)

# 진행 상황 Progress Bar
frame_progress = LabelFrame(root, text="진행상황")
frame_progress.pack(fill="x", padx=5, pady=5, ipady=5)

p_var = DoubleVar()
progress_bar = ttk.Progressbar(frame_progress, maximum=100, variable=p_var)
progress_bar.pack(fill="x", padx=5, pady=5)

# 실행 프레임
frame_run = Frame(root)
frame_run.pack(fill="x", padx=5, pady=5)

btn_close = Button(frame_run, padx=5, pady=5, text="닫기", width=12, command=root.quit)
btn_close.pack(side="right", padx=5, pady=5)

btn_start = Button(frame_run, padx=5, pady=5, text="시작", width=12, command=start)
btn_start.pack(side="right", padx=5, pady=5)

root.resizable(False, False)
root.mainloop()